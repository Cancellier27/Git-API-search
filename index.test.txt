// src/index.test.ts
import { describe, test, expect, jest, beforeEach } from '@jest/globals';
import { submitButton, sortRepos, sortStars } from './index';
import { GitHubRepo } from "./src/types";

// Mock the DOM elements
const setupDOM = () => {
  document.body.innerHTML = `
    <form id="search-form">
      <input id="username-input" />
    </form>
    <select id="repo-filter">
      <option value="newest">Newest</option>
      <option value="oldest">Oldest</option>
    </select>
    <select id="starred-filter">
      <option value="newest">Newest</option>
      <option value="oldest">Oldest</option>
    </select>
    <div id="results"></div>
    <div id="user-not-found-container" style="display: none;"></div>
    <ul id="repo-list"></ul>
    <ul id="starred-list"></ul>
    <div class="loader-container" style="display: none;"></div>
  `;
};

// Mock the imported modules
jest.mock('./src/fetch-data', () => ({
  fetchData: jest.fn().mockImplementation(async (username: unknown) => ({
    userData: { login: username as string },
    reposData: [],
    starredData: [],
    langData: {}
  }))
}));

jest.mock('./src/dom-manipulation', () => ({
  clearDOM: jest.fn(),
  populateUserProfile: jest.fn(),
  populateLists: jest.fn(),
  populateLanguages: jest.fn()
}));

describe('submitButton', () => {
  beforeEach(() => {
    setupDOM();
    jest.clearAllMocks();
  });

  test('should prevent default form submission', async () => {
    const e = { preventDefault: jest.fn() } as unknown as Event;
    await submitButton(e);
    expect(e.preventDefault).toHaveBeenCalled();
  });

  test('should return early if username is empty', async () => {
    const e = { preventDefault: jest.fn() } as unknown as Event;
    const input = document.getElementById('username-input') as HTMLInputElement;
    input.value = '';
    await submitButton(e);
    expect(input.value).toBe('');
  });

  test('should show loading state during fetch', async () => {
    const e = { preventDefault: jest.fn() } as unknown as Event;
    const input = document.getElementById('username-input') as HTMLInputElement;
    input.value = 'testuser';
    const loader = document.querySelector('.loader-container') as HTMLDivElement;
    
    await submitButton(e);
    
    expect(loader.style.display).toBe('none'); // Should hide after loading
  });
});

describe('sortRepos', () => {
  beforeEach(() => {
    setupDOM();
    jest.clearAllMocks();
  });

  test('should sort repos by newest', () => {
    const mockRepos: GitHubRepo[] = [
      { id: 1, updated_at: '2023-01-01T00:00:00Z', name: 'repo1', html_url: 'https://github.com/user/repo1', languages_url: 'https://api.github.com/repos/user/repo1/languages' } as GitHubRepo,
      { id: 2, updated_at: '2023-01-03T00:00:00Z', name: 'repo2', html_url: 'https://github.com/user/repo2', languages_url: 'https://api.github.com/repos/user/repo2/languages' } as GitHubRepo,
      { id: 3, updated_at: '2023-01-02T00:00:00Z', name: 'repo3', html_url: 'https://github.com/user/repo3', languages_url: 'https://api.github.com/repos/user/repo3/languages' } as GitHubRepo
    ];

    // Mock localStorage
    Storage.prototype.getItem = jest.fn((key: string) => 
      key === 'reposData' ? JSON.stringify(mockRepos) : null
    );

    const select = document.getElementById('repo-filter') as HTMLSelectElement;
    select.value = 'newest';
    const e = { target: select } as unknown as Event;

    sortRepos(e);

    const { populateLists } = require('./src/dom-manipulation');
    const sortedRepos = populateLists.mock.calls[0][0];
    expect(sortedRepos[0].id).toBe(2); // Newest first
    expect(sortedRepos[1].id).toBe(3);
    expect(sortedRepos[2].id).toBe(1);
  });
});

describe('sortStars', () => {
  beforeEach(() => {
    setupDOM();
    jest.clearAllMocks();
  });

  test('should sort starred repos by oldest', () => {
    const mockStarred: GitHubRepo[] = [
      { id: 1, updated_at: '2023-01-03T00:00:00Z', name: 'star1', html_url: 'https://github.com/user/star1', languages_url: 'https://api.github.com/repos/user/star1/languages' } as GitHubRepo,
      { id: 2, updated_at: '2023-01-01T00:00:00Z', name: 'star2', html_url: 'https://github.com/user/star2', languages_url: 'https://api.github.com/repos/user/star2/languages' } as GitHubRepo,
      { id: 3, updated_at: '2023-01-02T00:00:00Z', name: 'star3', html_url: 'https://github.com/user/star3', languages_url: 'https://api.github.com/repos/user/star3/languages' } as GitHubRepo
    ];

    Storage.prototype.getItem = jest.fn((key: string) =>
      key === 'starredData' ? JSON.stringify(mockStarred) : null
    );

    const select = document.getElementById('starred-filter') as HTMLSelectElement;
    select.value = 'oldest';
    const e = { target: select } as unknown as Event;

    sortStars(e);

    const { populateLists } = require('./src/dom-manipulation');
    const sortedStars = populateLists.mock.calls[0][0];
    expect(sortedStars[0].id).toBe(2); // Oldest first
    expect(sortedStars[1].id).toBe(3);
    expect(sortedStars[2].id).toBe(1);
  });
});